#!/usr/bin/env python3

"""
unrpa is a tool to extract files from Ren'Py archives (.rpa).

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import os
import argparse
import sys
import pickle
import zlib
import traceback


class UnRPA:
    NAME = "unrpa"

    def __init__(self, filename, verbosity=1, path=None, mkdir=False, version=None, continue_on_error=False):
        self.verbose = verbosity
        if path:
            self.path = os.path.abspath(path)
        else:
            self.path = os.getcwd()
        self.mkdir = mkdir
        self.version = version
        self.archive = filename
        self.continue_on_error = continue_on_error

    def log(self, verbosity, message):
        if self.verbose > verbosity:
            print("{}: {}".format(UnRPA.NAME, message))

    def exit(self, message):
        sys.exit("{}: error: {}".format(UnRPA.NAME, message))

    def extract_files(self):
        self.log(0, "extracting files.")
        if self.mkdir:
            self.make_directory_structure(self.path)
        if not os.path.isdir(self.path):
            self.exit("path doesn't exist, if you want to create it, use -m.")

        index = self.get_index()
        total_files = len(index)
        for file_number, (path, data) in enumerate(index.items()):
            try:
                self.make_directory_structure(os.path.join(self.path, os.path.split(path)[0]))
                raw_file = self.extract_file(path, data, file_number, total_files)
                with open(os.path.join(self.path, path), "wb") as f:
                    f.write(raw_file)
            except BaseException as e:
                if self.continue_on_error:
                    traceback.print_exc()
                    self.log(0,
                             "error extracting (see above), but --continue-on-error was used, so we will keep going.")
                else:
                    raise Exception("There was an error while trying to extract a file. See the nested exception for "
                                    "more. If you wish to try and extract as much from the archive as possible, please "
                                    "use the --continue-on-error flag.") from e

    def list_files(self):
        self.log(1, "listing files:")
        paths = self.get_index().keys()
        for path in sorted(paths):
            print(path)

    def extract_file(self, name, data, file_number, total_files):
        self.log(1, "[{:04.2%}] {:>3}".format(file_number / float(total_files), name))
        offset, dlen, start = data[0]
        with open(self.archive, "rb") as f:
            f.seek(offset)
            raw_file = start + f.read(dlen - len(start))
        return raw_file

    def make_directory_structure(self, name):
        self.log(2, "creating directory structure: {}".format(name))
        if not os.path.exists(name):
            os.makedirs(name)

    def get_index(self):
        if not self.version:
            self.version = self.detect_version()

        if not self.version:
            self.exit("file doesn't look like an archive, if you are sure it is, use -f.")

        with open(self.archive, "rb") as f:
            offset = 0
            if self.version == 2:
                offset = int(f.readline()[8:], 16)
            elif self.version == 3:
                line = f.readline()
                parts = line.split()
                offset = int(parts[1], 16)
                key = int(parts[2], 16)
            f.seek(offset)
            index = pickle.loads(zlib.decompress(f.read()), encoding="bytes")
            if self.version == 3:
                index = self.deobfuscate_index(index, key)

        return {self.ensure_str_path(path).replace("/", os.sep): data for path, data in index.items()}

    def ensure_str_path(self, key):
        try:
            return key.decode("utf-8")
        except AttributeError:
            return key

    def detect_version(self):
        ext = os.path.splitext(self.archive)[1].lower()
        if ext == ".rpa":
            with open(self.archive, "rb") as f:
                line = f.readline()
                if line.startswith(b"RPA-3.0 "):
                    return 3
                if line.startswith(b"RPA-2.0 "):
                    return 2
                else:
                    return None
        elif ext == ".rpi":
            return 1

    def deobfuscate_index(self, index, key):
        return {k: self.deobfuscate_entry(key, v) for k, v in index.items()}

    def deobfuscate_entry(self, key, entry):
        if len(entry[0]) == 2:
            return [(offset ^ key, dlen ^ key, b"") for offset, dlen in entry]
        else:
            return [(offset ^ key, dlen ^ key, start) for offset, dlen, start in entry]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extract files from the RPA archive format.")

    parser.add_argument("-v", "--verbose", action="count", dest="verbose", default=1,
                        help="explain what is being done [default].")
    parser.add_argument("-s", "--silent", action="store_const", const=0, dest="verbose",
                        help="no output.")
    parser.add_argument("-l", "--list", action="store_true", dest="list", default=False,
                        help="only list contents, do not extract.")
    parser.add_argument("-p", "--path", action="store", type=str, dest="path", default=None,
                        help="will extract to the given path.")
    parser.add_argument("-m", "--mkdir", action="store_true", dest="mkdir", default=False,
                        help="will make any non-existent directories in extraction path.")
    parser.add_argument("-f", "--force", action="store", type=int, dest="version", default=None,
                        help="forces an archive version. May result in failure.")
    parser.add_argument("--continue-on-error", action="store_true", dest="continue_on_error", default=False,
                        help="try to continue extraction when something goes wrong.")

    parser.add_argument("filename", metavar="FILENAME", type=str, help="the RPA file to extract.")

    args = parser.parse_args()

    if args.list and args.path:
        parser.error("option -path: only valid when extracting.")

    if args.mkdir and not args.path:
        parser.error("option --mkdir: only valid when --path is set.")

    if not args.mkdir and args.path and not os.path.isdir(args.path):
        parser.error("No such directory: '{}'. Use --mkdir to create it.".format(args.path))

    if args.list and args.verbose == 0:
        parser.error("option --list: can't be silent while listing data.")

    if not os.path.isfile(args.filename):
        parser.error("No such file: '{}'.".format(args.filename))

    extractor = UnRPA(args.filename, args.verbose, args.path, args.mkdir, args.version, args.continue_on_error)
    if args.list:
        extractor.list_files()
    else:
        extractor.extract_files()
